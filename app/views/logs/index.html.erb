<h2 style="margin-top:1.2em;">Mission logs for <span data-bind="text: mission.title"></span></h2>
<h5>Mission Start: <span data-bind="text: mission.started().toString('dddd MMM d, yyyy')"></span></h5>
<table cellspacing="0" id="logTable" class="data-table">
  <thead>
    <tr><th>Time</th><th>Log Message</th></tr>
  </thead>
  <tbody data-bind="foreach: {data: logs, afterAdd: highlightRow}">
    <tr data-bind="css: { odd: $index() % 2 != 0 }">
			<td class="r"><span data-bind="text:dateOffset"></span><span data-bind="text:when().toString('HH:mm')" class="b"></span></td>
			<td data-bind="text: message"></td>
		</tr>
  </tbody>
	<tfoot>
		<tr>
				<td style="vertical-align:top;">
					<input type="text" class="r" data-bind="value: formattedWhen, disable:doUpdateWhen" style="width:6em;"></input><br/>
					<input type="checkbox" id="autoUpdate" data-bind="checked: doUpdateWhen"/><label for="autoUpdate"> auto update</label>
				</td>
				<td>
				  <textarea id="newMsg" data-bind="value: nextLogEntry, hasfocus: focusForm, event: { keyup: cancelScroll }, css: { errInput: nextLogErrors().message }, ctrlEnter: doSave" style="width:40em; height:4em;"></textarea><br/>
					<div class="fieldErr" data-bind="visible: nextLogErrors().message, text: nextLogErrors().message"></div>
				  <input id="saveLogButton" type="button" value="Save Log" data-bind="click: doSave" />
				</td></tr>
	</tfoot>
</table>
<form id="newLogForm" data-bind="with: nextLogEntry">
</form>

<div style="background-color: blue; white-space:pre" data-bind="text: nextLogEntry().message"></div>

<div id="controlPanel" style="position:fixed; top:-2px; width:98%; margin:auto; border-radius:0px 0px 5px 5px; border:solid 2px #444444; background:#eeeeee;">
  <input type="checkbox" id="autoScroll" data-bind="checked: doAutoScroll"/>
  <label for="autoScroll">Automatically scroll</label>
</div>

<script type="text/javascript" src="http://<%= request.host %>:9292/faye.js"></script>

<script>
var LogModel = function(id, message, when)
{
	var self = this;
	this.id = ko.observable(id);
	this.message = ko.observable(message);
	this.when = ko.observable(when);

	this.dateOffset = ko.computed(function(){
		return (window['getMissionDateOffset']) ? getMissionDateOffset(this.when()) : this.when().toString('MMM dd');
	}, this);
}

var MissionModel = function(apiModel)
{
	var self = this;
	this.id = apiModel.id
	this.started = ko.observable(new XDate(apiModel.started, true))
	this.title = ko.observable(apiModel.title)
	this.number = ko.observable(apiModel.number)
}

var model;
var getMissionDateOffset = function(t)
{
  if (model && model.mission && model.mission.started())
	{
		var d = model.mission.started();
		d.clearTime();
		var t2 = t.clone().clearTime();

		var diff = d.diffDays(t2);
  	return diff ? diff + '+' : '';
	}
	return t.toString('MMM dd ');
}

var PageModel = function(apiMission)
{
  var self = this;
	this.mission = new MissionModel(apiMission);

  this.logs = ko.observableArray();
	this.nextLogEntry = ko.observable('');
	this.nextLogWhen = ko.observable(new XDate());
	this.nextLogErrors = ko.observable({});
	this.formattedWhen = ko.computed({
		read: function() { 
			var d = this.nextLogWhen();
			return getMissionDateOffset(d) + d.toString('HH:mm');
		},
    write: function(value) {
			m = value.match(/^(([\+-]?\d{1,2})\+)?([0-2]?\d)\:([0-5]\d)$/);
			var d = this.mission.started().clone();
			d.clearTime();
			if (m[2]) d = d.addDays(m[2]);
			d.setHours(m[3]);
			d.setMinutes(m[4]);

			this.nextLogWhen(d);
		},
		owner: this});

	this.focusForm = ko.observable(true);
	this.doUpdateWhen = ko.observable(true);
  this.doAutoScroll = ko.observable(true);

	this.highlightRow = function(domNode)
	{
		$(domNode).filter('tr').effect('highlight', 5000);
	}

	this.logsSort = function(left, right)
  {
		var l = isNaN(left.when()) ? new Date(0) : left.when().getTime();
		var r = isNaN(right.when()) ? new Date(0) : right.when().getTime();
		var val = 0;

		val = (l == r) ? (left.id() < right.id() ? -1 : 1) : (l < r ? -1 : 1);

		return val;
  }

	this.cancelScroll = function(model,evt)
	{
		if (self.doAutoScroll() && evt.keyCode != 9)
		{
 			self.doAutoScroll(false);
			$('#controlPanel').effect('highlight', { color: 'pink' }, 2000);
		}
  }

	this.doSave = function()
	{
		self.nextLogErrors({});
		$.ajax({ type: 'POST', url: '<%= mission_path(@mission) %>/logs.json', data: '{"log":' +ko.toJSON({message: self.nextLogEntry(), when: self.nextLogWhen().toString('yyyy-MM-dd HH:mm:ss')})+'}', dataType: 'JSON', contentType:'application/json; charset=utf-8'})
			.done(function(result) {
				self.nextLogEntry('');
				$('#saveLogButton')[0].scrollIntoView();
				self.focusForm(true);
			})
			.fail(function(jhr) {
				if (jhr.status == 422) {
					self.nextLogErrors($.parseJSON(jhr.responseText));
//					var errors = JSON.parse(jhr.responseText);
				}
				else { alert('General Error: ' + jhr.responseText); }
			})
			;
	}
}

$(document).ready(function() {
  model = new PageModel($.parseJSON('<%= j(@mission.to_json.html_safe) %>'));
  model.nextLogWhen(new XDate());

<% @logs.each do |log| %>
	model.logs.push(new LogModel(<%= log.id %>, '<%= j(log.message.html_safe) %>', new XDate('<%= log.when %>')));
<% end %>
	model.logs.sort(model.logsSort);

	ko.applyBindings(model);

  var faye = new Faye.Client('http://<%= request.host %>:9292/faye');
  faye.subscribe("/logs/new", function(data) {
		data = JSON.parse(data)
		if (data.mission_id != model.mission.id) return;
		if (console.log) console.log(data);
		model.logs.push(new LogModel(data.id, data.message, new XDate(data.when)));
		model.logs.sort(model.logsSort);
  	if (model.doAutoScroll()) $('#saveLogButton')[0].scrollIntoView();
	});

	window.setInterval(function() { if (model.doUpdateWhen()) model.nextLogWhen(new XDate()); }, 1000);
});
</script>
